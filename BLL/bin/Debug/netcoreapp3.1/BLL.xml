<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BLL</name>
    </assembly>
    <members>
        <member name="M:BLL.Services.OrderService.GetOrder(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32})">
            <summary>
            Return the order by user with id
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">Id of order</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.GetOrders(BLL.BLEntities.BLRoles.BLUser)">
            <summary>
            Returns all orders by user
            </summary>
            <param name="user">User whose order will be got</param>
            <returns>An IEnumerable of orders</returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if user was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.MakeOrder(BLL.BLEntities.BLRoles.BLUser,BLL.BLEntities.BLOrder)">
            <summary>
            Create an order 
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="order">Orderf that will be added to the order list</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.SetGetToOrder(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32})">
            <summary>
            Sets status "Get" to the order
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">THe id of order</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.EditOrder(BLL.BLEntities.BLRoles.BLUser,BLL.BLEntities.BLOrder,System.String)">
            <summary>
            Edits the information of order
            Changes country
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="order"></param>
            <param name="country"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.EditOrder(BLL.BLEntities.BLRoles.BLUser,BLL.BLEntities.BLOrder,System.Int32)">
            <summary>
            Edits the information of order
            Changes country
            </summary>
            <param name="user"></param>
            <param name="order"></param>
            <param name="number"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.EditOrder(BLL.BLEntities.BLRoles.BLUser,BLL.BLEntities.BLOrder,BLL.BLEntities.BLOrder)">
            <summary>
            Edits the information of order
            Changes country
            </summary>
            <param name="user"></param>
            <param name="order"></param>
            <param name="newOrder"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.CancelOrder(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32})">
            <summary>
            Cancel the order
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">The id of order</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.OrderService.ChangeStatus(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32},DAL.Enums.Statuses)">
            <summary>
            Change the status of order
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">The id of order</param>
            <param name="status">The status the will be set to the order</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.AddToBasket(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32})">
            <summary>
            Add to basket the product
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">The id of product</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.DeleteFromBasket(BLL.BLEntities.BLRoles.BLUser,System.Nullable{System.Int32})">
            <summary>
            Delete a product from basket
            </summary>
            <param name="user">User whose order will be got</param>
            <param name="id">The id of product</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.CreateProduct(BLL.BLEntities.BLProduct)">
            <summary>
            Creates a product and adds 
            to the list of product
            </summary>
            <param name="product">The product that will be added</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.DeleteProduct(BLL.BLEntities.BLProduct)">
            <summary>
            Delete a product from the list 
            </summary>
            <param name="product">the product with this pruduct`s id will be deleted</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.DeleteProduct(System.Nullable{System.Int32})">
            <summary>
            Delete a product from the list by id
            </summary>
            <param name="id">the product with this id will be deleted</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.EditProduct(System.Nullable{System.Int32},System.String)">
            <summary>
            Edit product`s name
            </summary>
            <param name="id">The id of product</param>
            <param name="name">New name</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.EditProduct(System.Nullable{System.Int32},System.Decimal)">
            <summary>
            Edit product`s price
            </summary>
            <param name="id">The id of product</param>
            <param name="price">New price</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.EditProduct(System.Nullable{System.Int32},BLL.BLEntities.BLProduct)">
            <summary>
            Change a product with id to new product
            </summary>
            <param name="id">The id of product</param>
            <param name="newPro">The new product</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.GetProduct(System.Nullable{System.Int32})">
            <summary>
            Get a product by id
            </summary>
            <param name="id">Id of searching product</param>
            <returns>the product with the id</returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.ProductService.GetProducts">
            <summary>
            Returns all products
            </summary>
            <returns>IEnumerable of products</returns>>
        </member>
        <member name="M:BLL.Services.ProductService.GetBasket(BLL.BLEntities.BLRoles.BLUser)">
            <summary>
            Returns the products which are in the user`s basket
            </summary>
            <param name="user">User whose basket will be got</param>
            <returns>IEnumerable of products</returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.Exit">
            <summary>
            Exit from the account
            </summary>
            <returns>Guest account</returns>
        </member>
        <member name="M:BLL.Services.UserService.GetUser(System.Nullable{System.Int32})">
            <summary>
            Get user by id
            </summary>
            <param name="id">The id of user</param>
            <returns>The looking for user</returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.GetUsers">
            <summary>
            Get all users
            </summary>
            <returns>IEnumerable of users</returns>
        </member>
        <member name="M:BLL.Services.UserService.SetIn(System.String,System.String)">
            <summary>
            Sign in to the registered account
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns></returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.IsUsed(System.String)">
            <summary>
            Checking of using the email
            </summary>
            <param name="email"></param>
            <returns>true if email is used, false if the email is free</returns>
        </member>
        <member name="M:BLL.Services.UserService.GetByEmail(System.String)">
            <summary>
            Get user by email
            </summary>
            <param name="email"></param>
            <returns>User</returns>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.SetUp(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            Sign up with the card
            </summary>
            <param name="firstname"></param>
            <param name="lastname"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="card">Number of card</param>
            <returns></returns>
        </member>
        <member name="M:BLL.Services.UserService.SetUp(System.String,System.String,System.String,System.String)">
            <summary>
            Sign up without money and card
            </summary>
            <param name="firstname"></param>
            <param name="lastname"></param>
            <param name="email"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:BLL.Services.UserService.AddUser(BLL.BLEntities.BLRoles.BLUser)">
            <summary>
            Adds user to the list
            </summary>
            <param name="user">The user that will be added</param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.ChangeUsersInfo(BLL.BLEntities.BLRoles.BLUser,System.String,System.String)">
            <summary>
            Changes name and last of user
            </summary>
            <param name="user"></param>
            <param name="name"></param>
            <param name="lastname"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.ChangeUsersPassword(BLL.BLEntities.BLRoles.BLUser,System.String)">
            <summary>
            Changes a password of user
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.ChangeUsersInfo(BLL.BLEntities.BLRoles.BLUser,System.Decimal)">
            <summary>
            Changes money
            </summary>
            <param name="user"></param>
            <param name="money"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.ChangeUsersInfo(BLL.BLEntities.BLRoles.BLUser,BLL.BLEntities.BLRoles.BLUser)">
            <summary>
            Changes to new user
            </summary>
            <param name="user"></param>
            <param name="newUser"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
        <member name="M:BLL.Services.UserService.ChangeUsersEmail(BLL.BLEntities.BLRoles.BLUser,System.String)">
            <summary>
            Changes the email of user
            </summary>
            <param name="user"></param>
            <param name="email"></param>
            <exception cref="T:BLL.Exceptions.ValidateException">Thrown if parameter was null</exception>
        </member>
    </members>
</doc>
